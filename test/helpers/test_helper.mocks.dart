// Mocks generated by Mockito 5.4.4 from annotations
// in talenavi_movie/test/helpers/test_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;
import 'package:talenavi_movie/core/failure/failure.dart' as _i5;
import 'package:talenavi_movie/features/movie/data/datasources/movie_local_data_source.dart'
    as _i7;
import 'package:talenavi_movie/features/movie/data/models/movie_model.dart'
    as _i6;
import 'package:talenavi_movie/features/movie/domain/repositories/movie_repository.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MovieRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieRepository extends _i1.Mock implements _i3.MovieRepository {
  MockMovieRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, String>> saveMovie(
          _i6.MovieModel? movie) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveMovie,
          [movie],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, String>>.value(
            _FakeEither_0<_i5.Failure, String>(
          this,
          Invocation.method(
            #saveMovie,
            [movie],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, String>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.MovieModel>>> getMovie(
          String? keyword) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMovie,
          [keyword],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, List<_i6.MovieModel>>>.value(
                _FakeEither_0<_i5.Failure, List<_i6.MovieModel>>(
          this,
          Invocation.method(
            #getMovie,
            [keyword],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.MovieModel>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, String>> deleteMovie(int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteMovie,
          [id],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, String>>.value(
            _FakeEither_0<_i5.Failure, String>(
          this,
          Invocation.method(
            #deleteMovie,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, String>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, String>> updateMovie(
          _i6.MovieModel? movie) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateMovie,
          [movie],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, String>>.value(
            _FakeEither_0<_i5.Failure, String>(
          this,
          Invocation.method(
            #updateMovie,
            [movie],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, String>>);
}

/// A class which mocks [MovieLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieLocalDataSource extends _i1.Mock
    implements _i7.MovieLocalDataSource {
  MockMovieLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<String> saveMovie(_i6.MovieModel? movie) => (super.noSuchMethod(
        Invocation.method(
          #saveMovie,
          [movie],
        ),
        returnValue: _i4.Future<String>.value(_i8.dummyValue<String>(
          this,
          Invocation.method(
            #saveMovie,
            [movie],
          ),
        )),
      ) as _i4.Future<String>);

  @override
  _i4.Future<List<_i6.MovieModel>> getMovie(String? keyword) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMovie,
          [keyword],
        ),
        returnValue: _i4.Future<List<_i6.MovieModel>>.value(<_i6.MovieModel>[]),
      ) as _i4.Future<List<_i6.MovieModel>>);

  @override
  _i4.Future<String> deleteMovie(int? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteMovie,
          [id],
        ),
        returnValue: _i4.Future<String>.value(_i8.dummyValue<String>(
          this,
          Invocation.method(
            #deleteMovie,
            [id],
          ),
        )),
      ) as _i4.Future<String>);

  @override
  _i4.Future<String> updateMovie(_i6.MovieModel? movie) => (super.noSuchMethod(
        Invocation.method(
          #updateMovie,
          [movie],
        ),
        returnValue: _i4.Future<String>.value(_i8.dummyValue<String>(
          this,
          Invocation.method(
            #updateMovie,
            [movie],
          ),
        )),
      ) as _i4.Future<String>);
}
